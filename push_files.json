{
    "repoName":  "mcp-github-server",
    "branch":  "main",
    "message":  "Initial commit: MCP server implementation with GitHub integration",
    "files":  [
                  {
                      "path":  "server.js",
                      "content":  ""
                  },
                  {
                      "path":  "README.md",
                      "content":  "IyBHaXRIdWIgTUNQIFNlcnZlcg0KDQpBIE1vZGVsIENvbnRleHQgUHJvdG9jb2wgKE1DUCkgc2VydmVyIGltcGxlbWVudGF0aW9uIHdpdGggY29tcHJlaGVuc2l2ZSBHaXRIdWIgaW50ZWdyYXRpb24gZm9yIEN1cnNvciBJREUuIFRoaXMgc2VydmVyIHByb3ZpZGVzIGEgcm9idXN0IEFQSSBmb3IgbWFuYWdpbmcgY29kZSBjb250ZXh0cyBhbmQgcGVyZm9ybWluZyBHaXRIdWIgb3BlcmF0aW9ucy4NCg0KIyMgRmVhdHVyZXMNCg0KLSAqKk1DUCBQcm90b2NvbCBTdXBwb3J0Kio6IEZ1bGwgaW1wbGVtZW50YXRpb24gb2YgdGhlIE1vZGVsIENvbnRleHQgUHJvdG9jb2wNCi0gKipHaXRIdWIgSW50ZWdyYXRpb24qKjogQ29tcHJlaGVuc2l2ZSBHaXRIdWIgQVBJIGludGVncmF0aW9uDQotICoqQnVsayBPcGVyYXRpb25zKio6IFN1cHBvcnQgZm9yIG11bHRpLWZpbGUgb3BlcmF0aW9ucyBpbiBzaW5nbGUgY29tbWl0cw0KLSAqKkRvY2tlciBTdXBwb3J0Kio6IFJlYWR5IHRvIHJ1biBpbiBjb250YWluZXJzDQotICoqQXV0b21hdGljIENvbnRlbnQgSGFuZGxpbmcqKjogQnVpbHQtaW4gY29udGVudCBlbmNvZGluZy9kZWNvZGluZw0KLSAqKkVycm9yIEhhbmRsaW5nKio6IENvbXByZWhlbnNpdmUgZXJyb3IgaGFuZGxpbmcgYW5kIGxvZ2dpbmcNCi0gKipIZWFsdGggTW9uaXRvcmluZyoqOiBCdWlsdC1pbiBoZWFsdGggY2hlY2sgZW5kcG9pbnQNCg0KIyMgUXVpY2sgU3RhcnQNCg0KIyMjIFVzaW5nIERvY2tlcg0KDQoxLiBCdWlsZCB0aGUgaW1hZ2U6DQogICBgYGBiYXNoDQogICBkb2NrZXIgYnVpbGQgLXQgbWNwLXNlcnZlciAuDQogICBgYGANCg0KMi4gUnVuIHdpdGggRG9ja2VyIENvbXBvc2U6DQogICBgYGBiYXNoDQogICBkb2NrZXItY29tcG9zZSB1cCAtZA0KICAgYGBgDQoNCiMjIyBNYW51YWwgU2V0dXANCg0KMS4gSW5zdGFsbCBkZXBlbmRlbmNpZXM6DQogICBgYGBiYXNoDQogICBucG0gaW5zdGFsbA0KICAgYGBgDQoNCjIuIFNldCB1cCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6DQogICBgYGBiYXNoDQogICBHSVRIVUJfVE9LRU49eW91cl9naXRodWJfdG9rZW4NCiAgIE5PREVfRU5WPXByb2R1Y3Rpb24NCiAgIFBPUlQ9MzAwMA0KICAgYGBgDQoNCjMuIFN0YXJ0IHRoZSBzZXJ2ZXI6DQogICBgYGBiYXNoDQogICBucG0gc3RhcnQNCiAgIGBgYA0KDQojIyBBUEkgRG9jdW1lbnRhdGlvbg0KDQojIyMgTUNQIFByb3RvY29sIEVuZHBvaW50cw0KDQojIyMjIENvbnRleHQgTWFuYWdlbWVudA0KDQotICoqSW5pdGlhbGl6ZSBDb250ZXh0KioNCiAgYGBgaHR0cA0KICBQT1NUIC92MS9pbml0DQogIGBgYA0KICBDcmVhdGVzIGEgbmV3IGNvbnRleHQgZm9yIG1hbmFnaW5nIGZpbGVzIGFuZCBvcGVyYXRpb25zLg0KDQotICoqQWRkIEZpbGUgdG8gQ29udGV4dCoqDQogIGBgYGh0dHANCiAgUE9TVCAvdjEvYWRkX2ZpbGUNCiAgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uDQoNCiAgew0KICAgICJjb250ZXh0X2lkIjogImN0eF8xMjMiLA0KICAgICJwYXRoIjogImZpbGUudHh0IiwNCiAgICAiY29udGVudCI6ICJmaWxlIGNvbnRlbnQiLA0KICAgICJyZXBvIjogIm9wdGlvbmFsX3JlcG9fbmFtZSIsDQogICAgImJyYW5jaCI6ICJvcHRpb25hbF9icmFuY2hfbmFtZSINCiAgfQ0KICBgYGANCg0KLSAqKlJlbW92ZSBGaWxlIGZyb20gQ29udGV4dCoqDQogIGBgYGh0dHANCiAgUE9TVCAvdjEvcmVtb3ZlX2ZpbGUNCiAgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uDQoNCiAgew0KICAgICJjb250ZXh0X2lkIjogImN0eF8xMjMiLA0KICAgICJwYXRoIjogImZpbGUudHh0Ig0KICB9DQogIGBgYA0KDQotICoqR2V0IENvbnRleHQqKg0KICBgYGBodHRwDQogIEdFVCAvdjEvZ2V0X2NvbnRleHQ/Y29udGV4dF9pZD1jdHhfMTIzDQogIGBgYA0KDQotICoqU2VhcmNoIGluIENvbnRleHQqKg0KICBgYGBodHRwDQogIFBPU1QgL3YxL3NlYXJjaA0KICBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCg0KICB7DQogICAgImNvbnRleHRfaWQiOiAiY3R4XzEyMyIsDQogICAgInF1ZXJ5IjogInNlYXJjaCB0ZXJtIg0KICB9DQogIGBgYA0KDQojIyMjIEdpdEh1YiBPcGVyYXRpb25zDQoNCi0gKipQdXNoIE11bHRpcGxlIEZpbGVzKioNCiAgYGBgaHR0cA0KICBQT1NUIC92MS9wdXNoX2ZpbGVzDQogIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbg0KDQogIHsNCiAgICAicmVwb05hbWUiOiAicmVwb19uYW1lIiwNCiAgICAiYnJhbmNoIjogIm1haW4iLA0KICAgICJmaWxlcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInBhdGgiOiAiZmlsZTEudHh0IiwNCiAgICAgICAgImNvbnRlbnQiOiAiY29udGVudDEiDQogICAgICB9LA0KICAgICAgew0KICAgICAgICAicGF0aCI6ICJmaWxlMi50eHQiLA0KICAgICAgICAiY29udGVudCI6ICJjb250ZW50MiINCiAgICAgIH0NCiAgICBdLA0KICAgICJtZXNzYWdlIjogIkNvbW1pdCBtZXNzYWdlIg0KICB9DQogIGBgYA0KDQotICoqR2V0IEZpbGVzIGZyb20gR2l0SHViKioNCiAgYGBgaHR0cA0KICBQT1NUIC92MS9naXRodWJfZmlsZXMNCiAgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uDQoNCiAgew0KICAgICJyZXBvIjogInJlcG9fbmFtZSIsDQogICAgImJyYW5jaCI6ICJtYWluIiwNCiAgICAicGF0aCI6ICJvcHRpb25hbC9wYXRoIg0KICB9DQogIGBgYA0KDQojIyMgR2l0SHViIE1hbmFnZW1lbnQgRW5kcG9pbnRzDQoNCi0gKipMaXN0IFJlcG9zaXRvcmllcyoqDQogIGBgYGh0dHANCiAgR0VUIC9yZXBvcw0KICBgYGANCg0KLSAqKkNyZWF0ZSBSZXBvc2l0b3J5KioNCiAgYGBgaHR0cA0KICBQT1NUIC9yZXBvDQogIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbg0KDQogIHsNCiAgICAicmVwb05hbWUiOiAibmV3X3JlcG8iLA0KICAgICJkZXNjcmlwdGlvbiI6ICJSZXBvc2l0b3J5IGRlc2NyaXB0aW9uIiwNCiAgICAicHJpdmF0ZSI6IHRydWUNCiAgfQ0KICBgYGANCg0KLSAqKkJyYW5jaCBPcGVyYXRpb25zKioNCiAgYGBgaHR0cA0KICBQT1NUIC9icmFuY2ggICAgIyBDcmVhdGUgYnJhbmNoDQogIERFTEVURSAvYnJhbmNoICAjIERlbGV0ZSBicmFuY2gNCiAgR0VUIC9icmFuY2ggICAgICMgR2V0IGJyYW5jaCBpbmZvDQogIGBgYA0KDQotICoqUHVsbCBSZXF1ZXN0IE9wZXJhdGlvbnMqKg0KICBgYGBodHRwDQogIFBPU1QgL3B1bGxyZXF1ZXN0ICAgICAgICAjIENyZWF0ZSBQUg0KICBQT1NUIC9wdWxscmVxdWVzdC9tZXJnZSAgIyBNZXJnZSBQUg0KICBgYGANCg0KLSAqKkZpbGUgT3BlcmF0aW9ucyoqDQogIGBgYGh0dHANCiAgUFVUIC9jb21taXQgICAjIENvbW1pdCBmaWxlDQogIEdFVCAvcmVhZG1lICAgIyBHZXQgUkVBRE1FDQogIEdFVCAvZmlsZXMgICAgIyBMaXN0IGZpbGVzDQogIEdFVCAvY29tbWl0cyAgIyBMaXN0IGNvbW1pdHMNCiAgYGBgDQoNCiMjIEVycm9yIEhhbmRsaW5nDQoNClRoZSBzZXJ2ZXIgcHJvdmlkZXMgZGV0YWlsZWQgZXJyb3IgcmVzcG9uc2VzIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0Og0KYGBganNvbg0Kew0KICAiZXJyb3IiOiAiRXJyb3IgZGVzY3JpcHRpb24iLA0KICAiZGV0YWlscyI6ICJEZXRhaWxlZCBlcnJvciBpbmZvcm1hdGlvbiINCn0NCmBgYA0KDQojIyBIZWFsdGggQ2hlY2sNCg0KTW9uaXRvciBzZXJ2ZXIgaGVhbHRoIHVzaW5nOg0KYGBgaHR0cA0KR0VUIC9oZWFsdGgNCmBgYA0KDQpSZXNwb25zZToNCmBgYGpzb24NCnsNCiAgInN0YXR1cyI6ICJoZWFsdGh5IiwNCiAgImdpdGh1Yl90b2tlbiI6IHRydWUsDQogICJjb250ZXh0cyI6IDUNCn0NCmBgYA0KDQojIyBEb2NrZXIgU3VwcG9ydA0KDQpUaGUgc2VydmVyIGluY2x1ZGVzIERvY2tlciBzdXBwb3J0IHdpdGg6DQotIE11bHRpLXN0YWdlIGJ1aWxkcw0KLSBWb2x1bWUgc3VwcG9ydCBmb3IgbG9ncw0KLSBFbnZpcm9ubWVudCB2YXJpYWJsZSBjb25maWd1cmF0aW9uDQotIEhlYWx0aCBjaGVja3MNCi0gQXV0b21hdGljIHJlc3RhcnQgY2FwYWJpbGl0eQ0KDQojIyBDb250cmlidXRpbmcNCg0KMS4gRm9yayB0aGUgcmVwb3NpdG9yeQ0KMi4gQ3JlYXRlIHlvdXIgZmVhdHVyZSBicmFuY2gNCjMuIENvbW1pdCB5b3VyIGNoYW5nZXMNCjQuIFB1c2ggdG8gdGhlIGJyYW5jaA0KNS4gQ3JlYXRlIGEgUHVsbCBSZXF1ZXN0DQoNCiMjIExpY2Vuc2UNCg0KTUlUIExpY2Vuc2UNCg=="
                  },
                  {
                      "path":  "package.json",
                      "content":  "ewogICJuYW1lIjogIm1jcC1naXRodWItc2VydmVyIiwKICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgImRlc2NyaXB0aW9uIjogIk1vZGVsIENvbnRleHQgUHJvdG9jb2wgc2VydmVyIHdpdGggR2l0SHViIGludGVncmF0aW9uIGZvciBDdXJzb3IgSURFIiwKICAibWFpbiI6ICJzZXJ2ZXIuanMiLAogICJ0eXBlIjogIm1vZHVsZSIsCiAgInNjcmlwdHMiOiB7CiAgICAic3RhcnQiOiAibm9kZSBzZXJ2ZXIuanMiLAogICAgImRldiI6ICJub2RlbW9uIHNlcnZlci5qcyIKICB9LAogICJrZXl3b3JkcyI6IFsKICAgICJtY3AiLAogICAgImdpdGh1YiIsCiAgICAiY3Vyc29yIiwKICAgICJpZGUiCiAgXSwKICAiYXV0aG9yIjogIk1vc3RhZmEgU3dhaXN5IiwKICAibGljZW5zZSI6ICJJU0MiLAogICJkZXBlbmRlbmNpZXMiOiB7CiAgICAiQG9jdG9raXQvcmVzdCI6ICJeMTkuMC43IiwKICAgICJib2R5LXBhcnNlciI6ICJeMS4yMC4yIiwKICAgICJkb3RlbnYiOiAiXjE2LjMuMSIsCiAgICAiZXhwcmVzcyI6ICJeNC4xOC4yIiwKICAgICJ3aW5zdG9uIjogIl4zLjguMiIKICB9LAogICJkZXZEZXBlbmRlbmNpZXMiOiB7CiAgICAibm9kZW1vbiI6ICJeMy4wLjEiCiAgfQp9"
                  },
                  {
                      "path":  ".gitignore",
                      "content":  "bm9kZV9tb2R1bGVzLw0KLmVudg0KLkRTX1N0b3JlDQpsb2dzLw0KLmN1cnNvci8NCi52c2NvZGUv"
                  },
                  {
                      "path":  "docker-compose.yml",
                      "content":  "dmVyc2lvbjogJzMuOCcNCg0Kc2VydmljZXM6DQogIG1jcC1zZXJ2ZXI6DQogICAgYnVpbGQ6IC4NCiAgICBpbWFnZTogbWNwLXNlcnZlcjpsYXRlc3QNCiAgICBjb250YWluZXJfbmFtZTogbWNwLXNlcnZlcg0KICAgIHBvcnRzOg0KICAgICAgLSAiMzAwMDozMDAwIg0KICAgIGVudmlyb25tZW50Og0KICAgICAgLSBOT0RFX0VOVj1wcm9kdWN0aW9uDQogICAgICAtIEdJVEhVQl9UT0tFTj1naHBfM1oyYVJBdGFIMHBKcGtDY1dKem1vVGtUUDJvWWF4MFpTRjM1DQogICAgdm9sdW1lczoNCiAgICAgIC0gLi9sb2dzOi91c3Ivc3JjL2FwcC9sb2dzDQogICAgcmVzdGFydDogdW5sZXNzLXN0b3BwZWQ="
                  },
                  {
                      "path":  "Dockerfile",
                      "content":  "IyBVc2UgTm9kZS5qcyBMVFMgdmVyc2lvbg0KRlJPTSBub2RlOjE4LWFscGluZQ0KDQojIENyZWF0ZSBhcHAgZGlyZWN0b3J5DQpXT1JLRElSIC91c3Ivc3JjL2FwcA0KDQojIENvcHkgcGFja2FnZSBmaWxlcw0KQ09QWSBwYWNrYWdlKi5qc29uIC4vDQoNCiMgSW5zdGFsbCBkZXBlbmRlbmNpZXMNClJVTiBucG0gaW5zdGFsbA0KDQojIENvcHkgc291cmNlIGNvZGUNCkNPUFkgLiAuDQoNCiMgQ3JlYXRlIHZvbHVtZSBmb3IgbG9ncw0KVk9MVU1FIFsiL3Vzci9zcmMvYXBwL2xvZ3MiXQ0KDQojIEV4cG9zZSBwb3J0DQpFWFBPU0UgMzAwMA0KDQojIFNldCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgd2l0aCBkZWZhdWx0cw0KRU5WIE5PREVfRU5WPXByb2R1Y3Rpb24gXA0KICAgIFBPUlQ9MzAwMCBcDQogICAgR0lUSFVCX1RPS0VOPSJnaHBfM1oyYVJBdGFIMHBKcGtDY1dKem1vVGtUUDJvWWF4MFpTRjM1Ig0KDQojIEFkZCBhIGhlYWx0aGNoZWNrDQpIRUFMVEhDSEVDSyAtLWludGVydmFsPTMwcyAtLXRpbWVvdXQ9MTBzIC0tc3RhcnQtcGVyaW9kPTVzIC0tcmV0cmllcz0zIFwNCiAgICBDTUQgd2dldCAtLW5vLXZlcmJvc2UgLS10cmllcz0xIC0tc3BpZGVyIGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9oZWFsdGggfHwgZXhpdCAxDQoNCiMgU3RhcnQgdGhlIHNlcnZlcg0KQ01EIFsic2giLCAiLWMiLCAiaWYgWyAteiBcIiRHSVRIVUJfVE9LRU5cIiBdOyB0aGVuIGVjaG8gJ0Vycm9yOiBHSVRIVUJfVE9LRU4gaXMgcmVxdWlyZWQnICYmIGV4aXQgMTsgZWxzZSBub2RlIHNlcnZlci5qczsgZmkiXQ=="
                  }
              ]
}
